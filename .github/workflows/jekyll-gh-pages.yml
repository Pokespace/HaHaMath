# 用于自动构建并部署 Jekyll 网站到 GitHub Pages 的工作流
# 工作流名称：Jekyll 自动部署到 GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled


# 触发条件：
# 1. 当推送到 master 分支时自动运行
# 2. 可以在 GitHub Actions 页面手动触发
on:
  push:
    branches: ["master"]
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，允许读取内容和部署到 Pages
permissions:
  contents: read   # 允许读取仓库内容
  pages: write     # 允许写入 Pages
  id-token: write  # 允许生成身份令牌

# 并发控制：只允许一个部署任务在运行，避免重复部署。
# 不会取消正在进行的部署，确保生产环境稳定。
concurrency:
  group: "pages"
  cancel-in-progress: false

# 工作任务定义
jobs:
  # 构建任务：负责拉取代码、配置环境、构建 Jekyll 站点并上传产物
  build:
    runs-on: ubuntu-latest # 在最新版 Ubuntu 环境下运行
    steps:
      - name: Checkout # 第一步：检出仓库代码
        uses: actions/checkout@v4
      - name: Setup Pages # 第二步：配置 GitHub Pages 环境
        uses: actions/configure-pages@v5
      - name: Build with Jekyll # 第三步：使用 Jekyll 构建静态网站
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./         # 源码目录为仓库根目录
          destination: ./_site # 构建输出到 _site 文件夹
      - name: Upload artifact # 第四步：上传构建好的静态文件作为部署产物
        uses: actions/upload-pages-artifact@v3

  # 部署任务：将构建产物发布到 GitHub Pages
  deploy:
    environment:
      name: github-pages # 部署到 github-pages 环境
      url: ${{ steps.deployment.outputs.page_url }} # 自动获取部署后的页面地址
    runs-on: ubuntu-latest # 在最新版 Ubuntu 环境下运行
    needs: build # 依赖 build 任务完成后再执行
    steps:
      - name: Deploy to GitHub Pages # 执行部署操作
        id: deployment
        uses: actions/deploy-pages@v4
